// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" /// mysql
  url      = env("DATABASE_URL")
}

/// User model
model User {
  id              String    @id @unique
  email           String    @unique
  role            Role      @default(ADMIN)
  session         Session[]
  Key             Key[]
  firstName       String?
  lastName        String?
  contactNumber   String?
  street          String?
  cityProvince    String?
  buildingNumber  String?
  postalCode      String?

  @@map("user")
}



/// Enums for user roles
enum Role {
  ADMIN /// Admin user
  USER  /// General user
}

/// Session model
model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

/// Key model
model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

/// Prodct model
model Product {
  id          String   @id @unique @default(cuid())
  name        String   @unique
  is_seasonal Boolean  @default(false)
  category_id String
  img_path    String
  img_src     String
  description String
  category    Category @relation(references: [id], fields: [category_id], onDelete: Cascade, onUpdate: Cascade)
  orders      OrderDetails[]

  @@index([category_id])
  @@map("product")
}

/// Category model
model Category {
  id          String   @id @unique @default(cuid())
  name        String   @unique
  products    Product[]
  offerings   Offering[]

  @@map("category")
}

/// Offering model
model Offering {
  id          String   @id @unique @default(cuid())
  category_id String
  // size_id     String
  size_name   String
  price       Decimal  @db.Decimal(10, 2)
  category    Category @relation(references: [id], fields: [category_id], onDelete: Cascade, onUpdate: Cascade)
  orders      OrderDetails[]
  // size        Size     @relation(references: [id], fields: [size_id], onDelete: Cascade, onUpdate: Cascade)

  @@index([category_id])
  @@map("offering")
}

/// Size model
// model Size {
//   id          String   @id @unique
//   name        String
//   offerings   Offering[]

//   @@map("size")
// }

/// Order model
model Order {
  id                  String        @id @unique @default(cuid())
  /// user_id     String
  number              Int           @db.SmallInt @default(autoincrement())
  email               String?       @default("")
  name                String
  first_name          String?       @default("")
  last_name           String?       @default("")
  suffix              String?       @default("")
  primary_contact     String
  secondary_contact   String?       @default("")
  delivery_address    String?       @default("")
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  estimated_delivery  DateTime?
  payment_status      PaymentStatus @default(NP)
  payment_mode        PaymentMode
  total_price         Decimal       @db.Decimal(10, 2)
  amount_paid         Decimal?      @db.Decimal(10, 2) @default(0)
  additional_details  String?       @default("")
  /// user        User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  order_details       OrderDetails[]
  payments            Payment[]
  orderNumber         String         @default("")

  /// @@index([user_id])
  @@map("order")
}

/// Enums for order payment status
enum PaymentStatus {
  SS /// Success Payment / Settled Payment
  FP /// Full Payment / Fully Paid
  PP /// Down Payment / Partially Paid
  NP /// No Payment / Unpaid
}

/// OrderDetails model
model OrderDetails {
  id          String    @id @unique @default(cuid())
  order_id    String
  product_id  String
  offering_id String
  quantity    Int       @db.SmallInt
  order       Order     @relation(references: [id], fields: [order_id], onDelete: Cascade, onUpdate: Cascade)
  product     Product   @relation(references: [id], fields: [product_id], onDelete: Cascade, onUpdate: Cascade)
  offering    Offering  @relation(references: [id], fields: [offering_id], onDelete: Cascade, onUpdate: Cascade)

  @@index([order_id, product_id])
  @@map("order_details")
}

/// Payment model
model Payment {
  id            String   @id @unique @default(cuid())
  order_id      String
  amount        Decimal  @db.Decimal(10, 2)
  paid_at       DateTime @default(now())
  payment_mode  PaymentMode
  order         Order    @relation(references: [id], fields: [order_id], onDelete: Cascade)

  @@index([order_id])
  @@map("payment")
}

/// Enums for payment mode
enum PaymentMode {
  GCASH /// GCash
  MAYA  /// Maya
  BDO   /// BDO
}
