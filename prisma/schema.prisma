// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" /// mysql
  url      = env("DATABASE_URL")
}

/// User model
model User {
  id       String    @id @unique
  email    String    @unique
  role     Role      @default(ADMIN)
  session  Session[]
  Key      Key[]

  @@map("user")
}

/// Enums for user roles
enum Role {
  ADMIN /// Admin user
  USER  /// General user
}

/// Session model
model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

/// Key model
model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

/// Prodct model
model Product {
  id          String   @id @unique
  name        String
  is_seasonal Boolean  @default(false)
  tier        Tier
  img_src     String
  description String
  offerings   Offering[]
  orders OrderDetails[]

  @@map("product")
}

/// Enums for product tiers
enum Tier {
  PLT   /// Platinum
  PRM   /// Premium
  SPRM  /// Super Premium
  LSGR  /// Less Sugar
  NA    /// Not Applicable
}

/// Offering model
model Offering {
  id          String   @id @unique
  product_id  String
  amount      ProductAmount
  other_amt   String?
  price       Decimal  @db.Decimal(10, 2)
  product     Product  @relation(references: [id], fields: [product_id], onDelete: Cascade)

  @@index([product_id])
  @@map("offering")
}

/// Enums for product amounts
enum ProductAmount {
  PNT   /// Pint
  HGAL  /// Half Gallon
  GAL   /// Gallon
  NA    /// Not Applicable
}

/// Order model
model Order {
  id                  String   @id @unique
  /// user_id     String
  email               String
  first_name          String
  last_name           String
  suffix              String?
  primary_contact     String?
  secondary_contact   String?
  delivery_address    String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  estimated_delivery  DateTime?
  payment_status      PaymentStatus
  total_price         Decimal  @db.Decimal(10, 2)
  // user        User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  order_details       OrderDetails[]
  payments            Payment[]

  // @@index([user_id])
  @@map("order")
}

/// Enums for order payment status
enum PaymentStatus {
  FP /// Full Payment
  DP /// Down Payment
  NP /// No Payment
}

/// OrderDetails model
model OrderDetails {
  id          String   @id @unique
  order_id    String
  product_id  String
  quantity    Int     @db.SmallInt
  order       Order   @relation(references: [id], fields: [order_id], onDelete: Cascade)
  product     Product @relation(references: [id], fields: [product_id], onDelete: Cascade)

  @@index([order_id])
  @@index([product_id])
  @@map("order_details")
}

/// Payment model
model Payment {
  id            String   @id @unique
  order_id      String
  amount        Decimal  @db.Decimal(10, 2)
  paid_at       DateTime @default(now())
  payment_mode  PaymentMode
  order         Order    @relation(references: [id], fields: [order_id], onDelete: Cascade)

  @@index([order_id])
  @@map("payment")
}

/// Enums for payment mode
enum PaymentMode {
  GCASH /// GCash
  BPI   /// BPI
}
